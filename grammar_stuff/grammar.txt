(* MAIN PARTS OF THE PROGRAM *)

program = function_definition, {function_definition | class_definition};

function_definition = "define", identifier, "(", parameters, ")", block;
method_definition = "define", identifier, "(", this_kw, parameters, ")", block;
class_definition = "class", identifier, class_block;

(* TODO: this *)

block = "{" {statement} "}";
class_block = {method_definition} ;

parameters = [identifier, {",", identifier}];

statement = conditional | loop | function_call | assign | return | comment | reflect;


(* EXPRESSIONS *)

(* DEFAULT KEYWORDS *)
conditional = "if" or_expression block,
                {"else if" or_expression block},
                {"else" block}
loop = while_loop | foreach_loop;

function_call = [value_getter
# function_call = value_getter, ';';

(* TODO: remove complex identifier*)

assign = complex_identifier, "=", or_expression, ";" ;
return = "return", or_expression, ";" ;
this_kw = "this";
reflect = "reflect", ["recursive"] or_expression, ';';

list_value = "[", [or_expression, {",", or_expression}], "]";


rest_function_call = "(" arguments ")";
this_value_getter = this_kw, access_oper ;
basic_value_getter = (identifer, [rest_function_call], [ '[', add_expression, ']' ]);

value_getter = [this_value_getter], basic_value_getter {access_oper basic_value_getter} ;



while_loop = "while", or_expression, block;
foreach_loop = "foreach", identifier, "in", or_expression, block;

arguments = [["by_ref"], or_expression, {",", ["by_ref"] or_expression}] ;

comment = "#", comment_text;
comment_text = {special_char | string | number | other_char} newline;


(* OPERATORS *)

(* LOGICAL *)
and_oper = "&&";
or_oper = "||";
not_oper = "!";


(* ARITHMETICAL *)
add_oper = "+" | "-";
mult_oper_general = mult_oper | modulo_oper;
mult_oper = "*" | "/";
modulo_oper = "%";
negative = "-";

(* RELATION *)
relation_oper = "<" | ">" | "<=" | ">=";
equality_oper = "==" | "!=";

(* DATA ACCESS *)
access_oper = ".";



(* OPERATOR PRIORITIES *)
or_expression = and_expression or_oper and_expression;
and_expression = equality_expression { and_oper equality_expression };
equality_expression = relation_expression relation_oper relation_expression;
relation_expression = add_expression relation_oper add_expression;

add_expression = multiply_expression { add_oper multiply_expression };
multiply_expression = unary_expression { mult_oper_general unary_expression }
unary_expression = general_value | not_unary_expression | negative_unary_expression;

not_unary_expression = not_oper, unary_expression;
negative_unary_expression = negative, unary_expression;

general_value = value | "(", or_expression, ")"; # a = [1,2,3] + !return_collection([1,2,3])
value = literal | complex_identifier | list_value;

identifier = ((underscore | dollar_sign) (letter | digit | underscore)) | letter) {letter | underscore | digit};


(* VARIABLES AND LITERALS *)
collection_elem = identifier, {"[", add_expression, "]"};

literal = string | number | bool;
bool = "true" | "false";

string = "\"" {character} "\"";
character = letter | digit | special_char;

number = non_zero_number | "0";
non_zero_number = non_zero_digit {digit};

digit = non_zero_digit | '0';
non_zero_digit = '1' - '9';

letter = 'A' - 'Z' | 'a' - 'z';
special_char = ";" | "\"" | "'" |"-" | "." | "," | "/" | "\\" | underscore | dollar_sign | whitespace | "#" ;
other_sp_char = "=" | "?" | "!" | "[" | "]" | "(" | ")" | "{" | "}" | "<" | ">";


newline = '\n';
underscore = '_';